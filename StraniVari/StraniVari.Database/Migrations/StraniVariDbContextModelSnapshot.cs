// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StraniVari.Database;

#nullable disable

namespace StraniVari.Database.Migrations
{
    [DbContext(typeof(StraniVariDbContext))]
    partial class StraniVariDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "Administrator",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "RegularUser",
                            Name = "RegularUser",
                            NormalizedName = "RegularUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StraniVariTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4705),
                            EndDate = new DateTime(2021, 3, 26, 18, 31, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2019",
                            StartDate = new DateTime(2020, 4, 25, 19, 31, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Cartoon characters"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4779),
                            EndDate = new DateTime(2022, 1, 18, 5, 52, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2020",
                            StartDate = new DateTime(2019, 11, 28, 10, 1, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Favourite activity"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4783),
                            EndDate = new DateTime(2022, 3, 14, 18, 24, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2021",
                            StartDate = new DateTime(2020, 11, 12, 15, 3, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Circus"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4786),
                            EndDate = new DateTime(2020, 3, 23, 16, 57, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2022",
                            StartDate = new DateTime(2021, 7, 8, 16, 28, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Favourite cartoon"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4789),
                            EndDate = new DateTime(2020, 1, 19, 18, 51, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2018",
                            StartDate = new DateTime(2022, 8, 23, 11, 54, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Health"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4794),
                            EndDate = new DateTime(2023, 10, 4, 4, 53, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strani Vari 2023",
                            StartDate = new DateTime(2023, 9, 3, 0, 51, 0, 0, DateTimeKind.Unspecified),
                            StraniVariTheme = "Elements"
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.EventSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SchoolId");

                    b.ToTable("EventSchools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4874),
                            EventId = 1,
                            NumberOfChildren = 90,
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4879),
                            EventId = 3,
                            NumberOfChildren = 80,
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4882),
                            EventId = 4,
                            NumberOfChildren = 50,
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4885),
                            EventId = 1,
                            NumberOfChildren = 123,
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4887),
                            EventId = 3,
                            NumberOfChildren = 90,
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4891),
                            EventId = 2,
                            NumberOfChildren = 80,
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4893),
                            EventId = 1,
                            NumberOfChildren = 50,
                            SchoolId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4896),
                            EventId = 1,
                            NumberOfChildren = 123,
                            SchoolId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4898),
                            EventId = 1,
                            NumberOfChildren = 90,
                            SchoolId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4902),
                            EventId = 3,
                            NumberOfChildren = 80,
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4554),
                            Name = "Fudbal",
                            Rules = "Svaka se ekipa sastoji od najviše 11 igrača (ne zamjena tj. rezervi), od kojih jedan mora biti golman. Pravila takmičenja određuju minimalan broj igrača koji je potreban za stvaranje ekipe, što je najčešće sedam."
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4595),
                            Name = "Pitalice s loptom",
                            Rules = "Uzmite loptu i preko nje zalijepite bijeli papir sa selotejpom. Napišite djeci. Neka djeca sjednu u krug i bacaju loptu. Kad uhvate loptu, moraju odgovoriti na pitanje najbliže desnom kažiprstu. Nakon odgovora, opet bacaju loptu. Možete na lopti napisati brojeve, a pitanja posebno na papiru ako vam je tako lakše."
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4598),
                            Name = "Pogodi tko sam – igra imitacije i pogađanja",
                            Rules = "Riječ je o pantomimi gdje jedna osoba glumi neku drugu osobu koju ostali igrači znaju. Sve je dozvoljeno osim razgovora."
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4600),
                            Name = "Crtanje zavezanih očiju",
                            Rules = "Na dječjoj ploči ili većem komadu papira organizirajte igru u kojoj ćete se izmjenjivati u crtanju. Preostali igrači neke redom zadaju zadatke. U igri nema bodova i pobjednika, cilj je dobra zabava."
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4602),
                            Name = "Izmedju dvije vatre",
                            Rules = "U igri učestvuje osam (8) igrača, sedam (7) u svojoj polovici terena za igru i jedan graničar. Graničar se nalazi iza linije terena za igre na suprotnoj strani od polovice terena za igru gdje se nalazi njegova ekipa. Suparnička ekipa nalazi se između graničara i njegove ekipe.Cilj igre je da svaka ekipa rukom bačenu loptu neobranjivo pogađa igrače suparničke ekipe u njihovom polju,a da izbjegnu iste namjere suparničke ekipe.Meč se igra na ispadanje,tačnije kada protivnička ekipa pogodi igrača,igrač ispada i meč se igra sve dok se ne pogodi i posljedni igrač u polju."
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4938),
                            Name = "Vodene bojice"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4943),
                            Name = "Papir u boji"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4946),
                            Name = "Lopte"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4948),
                            Name = "Reketi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4950),
                            Name = "Flomasteri"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4953),
                            Name = "Bojice"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4956),
                            Name = "Hamer papir"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4958),
                            Name = "Face paint"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4960),
                            Name = "Glina"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4963),
                            Name = "Plastelin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4966),
                            Name = "Siljalo"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4968),
                            Name = "Makaze"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4970),
                            Name = "Kolaz papir"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4973),
                            Name = "Platno"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4975),
                            Name = "Bijeli papir"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4977),
                            Name = "Krede"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4979),
                            Name = "Heftarica"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4982),
                            Name = "Bijeli papir"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4985),
                            Name = "Baloni"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(4987),
                            Name = "Tempere"
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Roncadelle",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5073),
                            EventId = 4,
                            MeetingDate = new DateTime(2022, 4, 19, 18, 9, 0, 0, DateTimeKind.Unspecified),
                            MeetingPlace = "Ambasada lokalne demokaratije",
                            MeetingTheme = "Odnos volontera i djece"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Roncadelle",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5079),
                            EventId = 1,
                            MeetingDate = new DateTime(2022, 7, 6, 15, 44, 0, 0, DateTimeKind.Unspecified),
                            MeetingPlace = "Ambasada lokalne demokaratije",
                            MeetingTheme = "Organizacija radionice u sali Prve osnovne skole"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Roncadelle",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5083),
                            EventId = 3,
                            MeetingDate = new DateTime(2022, 9, 7, 4, 48, 0, 0, DateTimeKind.Unspecified),
                            MeetingPlace = "Ambasada lokalne demokaratije",
                            MeetingTheme = "Odnos volontera i djece"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Roncadelle",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5086),
                            EventId = 4,
                            MeetingDate = new DateTime(2022, 6, 18, 15, 40, 0, 0, DateTimeKind.Unspecified),
                            MeetingPlace = "Ambasada lokalne demokaratije",
                            MeetingTheme = "Organizacija radionice u sali Prve osnovne skole"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Roncadelle",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5089),
                            EventId = 1,
                            MeetingDate = new DateTime(2022, 11, 21, 15, 2, 0, 0, DateTimeKind.Unspecified),
                            MeetingPlace = "Ambasada lokalne demokaratije",
                            MeetingTheme = "Odnos volontera i djece"
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.PlanAndProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("PlanAndProgramme");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activity = "Radionice",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5126),
                            EndDate = new DateTime(2021, 1, 5, 22, 38, 0, 0, DateTimeKind.Unspecified),
                            EventId = 4,
                            StartDate = new DateTime(2021, 4, 9, 6, 47, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Activity = "Pauza",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5133),
                            EndDate = new DateTime(2021, 9, 10, 12, 39, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            StartDate = new DateTime(2021, 7, 24, 9, 49, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Activity = "Sekcije",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5136),
                            EndDate = new DateTime(2021, 5, 8, 3, 41, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            StartDate = new DateTime(2021, 8, 6, 9, 13, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Activity = "Bans",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5139),
                            EndDate = new DateTime(2021, 6, 1, 23, 46, 0, 0, DateTimeKind.Unspecified),
                            EventId = 4,
                            StartDate = new DateTime(2021, 2, 3, 12, 27, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Activity = "Radionice",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5142),
                            EndDate = new DateTime(2021, 9, 14, 0, 30, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            StartDate = new DateTime(2021, 9, 11, 18, 33, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sutjeska",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5299),
                            Name = "Druga osnovna skola"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Gostovic",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5303),
                            Name = "Osnovna skola Gostovic"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Poljice",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5306),
                            Name = "Osnovna skola Poljice"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Safvet-bega Bašagića bb",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5309),
                            Name = "Prva osnovna skola"
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.SchoolMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventSchoolId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventSchoolId");

                    b.HasIndex("MaterialId");

                    b.ToTable("SchoolMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5185),
                            EventSchoolId = 3,
                            MaterialId = 9,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5245),
                            EventSchoolId = 1,
                            MaterialId = 5,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5249),
                            EventSchoolId = 2,
                            MaterialId = 4,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5252),
                            EventSchoolId = 1,
                            MaterialId = 12,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5254),
                            EventSchoolId = 9,
                            MaterialId = 5,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5265),
                            EventSchoolId = 3,
                            MaterialId = 20,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.SchoolVolunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventSchoolId")
                        .HasColumnType("int");

                    b.Property<bool>("TransportNeeded")
                        .HasColumnType("bit");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventSchoolId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("SchoolVolunteers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5337),
                            EventSchoolId = 9,
                            TransportNeeded = false,
                            VolunteerId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5343),
                            EventSchoolId = 9,
                            TransportNeeded = true,
                            VolunteerId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5346),
                            EventSchoolId = 6,
                            TransportNeeded = false,
                            VolunteerId = 5
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5349),
                            EventSchoolId = 1,
                            TransportNeeded = true,
                            VolunteerId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5352),
                            EventSchoolId = 3,
                            TransportNeeded = false,
                            VolunteerId = 5
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.TripStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TripStatuses");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07d0ebea-26c3-49fb-a477-0b7efbb9df16",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEDHUghaTzFVEj+Lu6qgarzl+SR70Q5y3thhQZbT08mdOdsmbYFe2uR+TQBzxk8JZhA==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16c163d3-546e-4cfe-b11a-9dce83d08766",
                            Email = "una2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "una",
                            LastName = "una",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "una2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh7RPrnb7PqRRIsSyKFo7CJ8nLNnoWeyt8KJGV7EuGIEX0hIXs70+Zuv/hhDwKzVQ==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "una2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5c7b1aa-0b5d-4505-9255-35e387f4681a",
                            Email = "una3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "una",
                            LastName = "una",
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@gmail.com",
                            NormalizedUserName = "una3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh7RPrnb7PqRRIsSyKFo7CJ8nLNnoWeyt8KJGV7EuGIEX0hIXs70+Zuv/hhDwKzVQ==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "una3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f254a53-c153-48df-b6f3-27a69b49a3e6",
                            Email = "una4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "una",
                            LastName = "una",
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@gmail.com",
                            NormalizedUserName = "una4",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh7RPrnb7PqRRIsSyKFo7CJ8nLNnoWeyt8KJGV7EuGIEX0hIXs70+Zuv/hhDwKzVQ==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "una4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f1f4958-4271-4c2e-a7be-f8f60a4cbf7f",
                            Email = "una5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "una",
                            LastName = "una",
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@gmail.com",
                            NormalizedUserName = "una5",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh7RPrnb7PqRRIsSyKFo7CJ8nLNnoWeyt8KJGV7EuGIEX0hIXs70+Zuv/hhDwKzVQ==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "una5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5985ebeb-e3a8-4aeb-8de6-9c8e2d2162e8",
                            Email = "una6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "una",
                            LastName = "una",
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@gmail.com",
                            NormalizedUserName = "una6",
                            PasswordHash = "AQAAAAEAACcQAAAAEPh7RPrnb7PqRRIsSyKFo7CJ8nLNnoWeyt8KJGV7EuGIEX0hIXs70+Zuv/hhDwKzVQ==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = true,
                            UserName = "una6"
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Volunteer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateOfVolunteering")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "Ulica zlatnih ljiljana",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5470),
                            DateOfBirth = new DateTime(2022, 6, 5, 4, 9, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Semina",
                            LastName = "Sinanovic",
                            StartDateOfVolunteering = new DateTime(2022, 4, 11, 14, 52, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Ulica 4.manevarskog bataljona",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5478),
                            DateOfBirth = new DateTime(2022, 11, 22, 1, 46, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ajna",
                            LastName = "Tanovic",
                            StartDateOfVolunteering = new DateTime(2022, 2, 9, 12, 4, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Ulica zlatnih ljiljana",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5481),
                            DateOfBirth = new DateTime(2022, 10, 24, 7, 46, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Elda",
                            LastName = "Bratanovic",
                            StartDateOfVolunteering = new DateTime(2022, 9, 12, 9, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Ulica 4.manevarskog bataljona",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5484),
                            DateOfBirth = new DateTime(2022, 10, 1, 2, 21, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Una",
                            LastName = "Milicevic",
                            StartDateOfVolunteering = new DateTime(2022, 7, 5, 5, 39, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Ulica zlatnih ljiljana",
                            City = "Zavidovici",
                            CreatedDate = new DateTime(2023, 5, 3, 21, 8, 8, 385, DateTimeKind.Local).AddTicks(5487),
                            DateOfBirth = new DateTime(2022, 10, 11, 13, 23, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Edvin",
                            LastName = "Joldic",
                            StartDateOfVolunteering = new DateTime(2022, 8, 5, 10, 45, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StraniVari.Core.Entities.VolunteerTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VolunteerTrip");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StraniVari.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StraniVari.Core.Entities.EventSchool", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.Event", "Event")
                        .WithMany("EventSchools")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StraniVari.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("School");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Notification", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.PlanAndProgramme", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.SchoolMaterial", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.EventSchool", "EventSchool")
                        .WithMany()
                        .HasForeignKey("EventSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StraniVari.Core.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventSchool");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.SchoolVolunteer", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.EventSchool", "EventSchool")
                        .WithMany("SchoolVolunteers")
                        .HasForeignKey("EventSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StraniVari.Core.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventSchool");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Volunteer", b =>
                {
                    b.HasOne("StraniVari.Core.Entities.User", "User")
                        .WithOne("Volunteer")
                        .HasForeignKey("StraniVari.Core.Entities.Volunteer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.Event", b =>
                {
                    b.Navigation("EventSchools");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.EventSchool", b =>
                {
                    b.Navigation("SchoolVolunteers");
                });

            modelBuilder.Entity("StraniVari.Core.Entities.User", b =>
                {
                    b.Navigation("Volunteer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
